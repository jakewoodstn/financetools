//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Entity;
using System.Data.Entity.Infrastructure;
using System.Data.Entity.Core.Objects;
using System.Linq;

public partial class FinancesEntities : DbContext
{
    public FinancesEntities()
        : base("name=FinancesEntities")
    {
    }

    protected override void OnModelCreating(DbModelBuilder modelBuilder)
    {
        throw new UnintentionalCodeFirstException();
    }

    public virtual DbSet<simpleBudget> simpleBudgets { get; set; }
    public virtual DbSet<simpleBudgetCalculatedActual> simpleBudgetCalculatedActuals { get; set; }
    public virtual DbSet<simpleBudgetExpected> simpleBudgetExpecteds { get; set; }
    public virtual DbSet<simpleBudgetRule> simpleBudgetRules { get; set; }
    public virtual DbSet<DimDate> DimDates { get; set; }
    public virtual DbSet<taggedEvent> taggedEvents { get; set; }
    public virtual DbSet<transactionTaggedEvent> transactionTaggedEvents { get; set; }

    public virtual ObjectResult<string> materializeSimpleBudgetActual(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> sendMessage, Nullable<int> force)
    {
        var startDateParameter = startDate.HasValue ?
            new ObjectParameter("startDate", startDate) :
            new ObjectParameter("startDate", typeof(System.DateTime));

        var endDateParameter = endDate.HasValue ?
            new ObjectParameter("endDate", endDate) :
            new ObjectParameter("endDate", typeof(System.DateTime));

        var sendMessageParameter = sendMessage.HasValue ?
            new ObjectParameter("sendMessage", sendMessage) :
            new ObjectParameter("sendMessage", typeof(int));

        var forceParameter = force.HasValue ?
            new ObjectParameter("force", force) :
            new ObjectParameter("force", typeof(int));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("materializeSimpleBudgetActual", startDateParameter, endDateParameter, sendMessageParameter, forceParameter);
    }
}
