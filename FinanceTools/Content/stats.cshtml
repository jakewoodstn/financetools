@using System.Dynamic;

@functions{

            IDictionary<string, string> templateInsideDictionary(IList<string> keyList)
            {

                IDictionary<string, string> ret = new Dictionary<string, string>();
                foreach (string k in keyList)
                {
                    ret.Add(k, "");
                }

                return ret;
            }

            IDictionary<string, IDictionary<string, string>> templateStatListDictionary(IList<string> statList, IList<string> dateList)
            {

                IDictionary<string, IDictionary<string, string>> ret = new Dictionary<string, IDictionary<string, string>>();

                foreach (string s in statList)
                {
                    ret.Add(s, templateInsideDictionary(dateList));
                }
                return ret;
            }



            string statisticsContent(FinancesEntities fc, DateTime startDate, DateTime endDate, string timeQuantumType)
            {


                //building blocks
                string rowStr = "<div class=\"row {0} {1}\">";
                string colStr = "<div class=\"col-sm-{0} {1} {2}\">";
                string breakerStr = "<div class=\"row\"><div class=\"col-sm-12\">&nbsp;</div></div>";
                string closeDivStr = "</div>";
                string topLabelSpan = "<span class=\"h3 callout\">{0}:</span>";
                string budgetSpan = "<span class=\"foldTrigger h4\">{0} - {1}</span>";
                string headerCol = string.Format(colStr, "2", "header", "callout") + "{0}" + closeDivStr;
                string labelCol = string.Format(colStr, "2", "header", "") + "{0}" + closeDivStr;
                string dataCol = string.Format(colStr, "2", "", "") + "{0}" + closeDivStr;


                //data driven rows - 1 header row with timeframes across the top, plus 5 rows for the data elements.
                IDictionary<int, string> titles = new Dictionary<int, string>();
                titles[0] = "Obs Months / Months:";
                titles[1] = "Total $:";
                titles[2] = "Min $ / Max $:";
                titles[3] = "Median Month $:";
                titles[4] = "Mean / Std Dev Month $:";

                IList<string> quantaHeaders = timeQuanta(fc, startDate, endDate, timeQuantumType);


                int budgetCounter = 0;
                int statCounter = 0;


                var dataQuery = fc.simpleBudgetMaterializedSummaryStatistics
                                .Join(fc.simpleBudgets, mss => mss.income_expense + "|" + mss.budget + "|" + mss.subBudget, sb => sb.label1 + "|" + sb.label2 + "|" + sb.label3, (mss, sb) => new { mss.statisticsKey, mss.income_expense, mss.budget, mss.subBudget, mss.statistic, mss.value, sb.sortOrder })
                                .Select(a => new { a.statisticsKey, a.income_expense, a.budget, a.subBudget, a.statistic, a.value, a.sortOrder })
                                .Where(a => quantaHeaders.Any(q => timeQuantumType + "|" + q == a.statisticsKey))
                                .OrderBy(x => x.sortOrder);


                IList<string> statisticSet = dataQuery.Select(a => a.statistic).Distinct().ToList();

                IDictionary<string, KeyValuePair<string, string>> expenseBudgetList = new Dictionary<string, KeyValuePair<string, string>>();
                expenseBudgetList = dataQuery.Select(a => new { a.income_expense, a.budget, a.subBudget, a.sortOrder }).Where(a => a.income_expense == "Expenses").Distinct().OrderBy(x => x.sortOrder).ToDictionary(b => b.budget + "|" + b.subBudget, b => new KeyValuePair<string, string>(b.budget, b.subBudget));

                IDictionary<string, IDictionary<string, IDictionary<string, string>>> expenseBudgetDictionary = new Dictionary<string, IDictionary<string, IDictionary<string, string>>>();

                foreach (string b in expenseBudgetList.Keys)
                {
                    expenseBudgetDictionary.Add(b, templateStatListDictionary(statisticSet, quantaHeaders));
                }


                IDictionary<string, KeyValuePair<string, string>> incomeBudgetList = new Dictionary<string, KeyValuePair<string, string>>();
                incomeBudgetList = dataQuery.Select(a => new { a.income_expense, a.budget, a.subBudget,a.sortOrder }).Where(a => a.income_expense == "Income").Distinct().OrderBy(x=>x.sortOrder).ToDictionary(b => b.budget + "|" + b.subBudget, b => new KeyValuePair<string, string>(b.budget, b.subBudget));

                IDictionary<string, IDictionary<string, IDictionary<string, string>>> incomeBudgetDictionary = new Dictionary<string, IDictionary<string, IDictionary<string, string>>>();

                foreach (string b in incomeBudgetList.Keys)
                {
                    incomeBudgetDictionary.Add(b, templateStatListDictionary(statisticSet, quantaHeaders));
                }

                foreach (var r in dataQuery.ToList())
                {
                    if (r.income_expense == "Expenses")
                    {
                        foreach (string q in quantaHeaders)
                        {
                            if (r.statisticsKey.Contains(q))
                            {
                                expenseBudgetDictionary[r.budget + "|" + r.subBudget][r.statistic][q] = r.value.ToString();
                            }
                        }
                    }
                    if (r.income_expense == "Income")
                    {
                        foreach (string q in quantaHeaders)
                        {
                            if (r.statisticsKey.Contains(q))
                            {
                                incomeBudgetDictionary[r.budget + "|" + r.subBudget][r.statistic][q] = r.value.ToString();
                            }
                        }
                    }
                }


                //main body, 1 for each of income and expense
                string mainSectionTitle = string.Format(rowStr, "", "") + string.Format(colStr, "12", "", "") + string.Format(topLabelSpan, "Expenses") + closeDivStr + closeDivStr;
                //main body, 1 for each budget/subBudget combination
                string mainSectionContainer = "";
                string mainSectionContent = "";
                foreach (string bs in expenseBudgetDictionary.Keys)
                {
                    budgetCounter++;
                    string budget = bs.Substring(0, bs.IndexOf("|"));
                    string subbudget = bs.Substring(bs.IndexOf("|") + 1);
                    mainSectionContainer = string.Format(rowStr, "dropTiny", "foldable" + (budgetCounter % 2 == 1 ? " info2" : "")) + string.Format(colStr, "1", "", "") + string.Format(budgetSpan, budget, subbudget) + closeDivStr + string.Format(colStr, "10", "folds", "") + "{0}" + closeDivStr + closeDivStr;
                    string headerRow = string.Format(rowStr, "dropTiny", "") + string.Format(headerCol, "&nbsp;");
                    string gridRow = "";
                    string gridRows = "";
                    foreach (string q in quantaHeaders)
                    {
                        headerRow += string.Format(headerCol, q);
                    }
                    gridRow = string.Format(rowStr, "dropTiny ", statCounter % 2 == 1 ? "info" : "info3") + string.Format(labelCol, titles[0]);

                    foreach (string q in quantaHeaders)
                    {
                        string value = "";
                        string value2 = "";

                        value = expenseBudgetDictionary[bs]["nonzeroObsExpense"][q];
                        value = value == "" ? "0" : value;
                        value2 = expenseBudgetDictionary[bs]["obs"][q];
                        value2 = value2 == "" ? "0" : value2;

                        gridRow += string.Format(dataCol, string.Format("{0:0}", value.AsDecimal()) + " / " + string.Format("{0:0}", value2.AsDecimal()));
                    }
                    gridRows += gridRow + closeDivStr;
                    statCounter++;

                    gridRow = string.Format(rowStr, "dropTiny", statCounter % 2 == 1 ? "info" : "info3") + string.Format(labelCol, titles[1]);

                    foreach (string q in quantaHeaders)
                    {
                        string value = "";

                        value = expenseBudgetDictionary[bs]["totalExpense"][q];
                        value = value == "" ? "0" : value;

                        gridRow += string.Format(dataCol, string.Format("{0:C2}", value.AsDecimal()));
                    }
                    gridRows += gridRow + closeDivStr;
                    statCounter++;

                    gridRow = string.Format(rowStr, "dropTiny", statCounter % 2 == 1 ? "info" : "info3") + string.Format(labelCol, titles[2]);

                    foreach (string q in quantaHeaders)
                    {
                        string value = "";
                        string value2 = "";

                        value = expenseBudgetDictionary[bs]["minExpense"][q];
                        value = value == "" ? "0" : value;
                        value2 = expenseBudgetDictionary[bs]["maxExpense"][q];
                        value2 = value2 == "" ? "0" : value2;

                        gridRow += string.Format(dataCol, string.Format("{0:C2}", value.AsDecimal()) + " / " + string.Format("{0:C2}", value2.AsDecimal()));
                    }
                    gridRows += gridRow + closeDivStr;
                    statCounter++;


                    gridRow = string.Format(rowStr, "dropTiny", statCounter % 2 == 1 ? "info" : "info3") + string.Format(labelCol, titles[3]);

                    foreach (string q in quantaHeaders)
                    {
                        string value = "";

                        value = expenseBudgetDictionary[bs]["medianObservedExpense"][q];
                        value = value == "" ? "0" : value;

                        gridRow += string.Format(dataCol, string.Format("{0:C2}", value.AsDecimal()));
                    }
                    gridRows += gridRow + closeDivStr;
                    statCounter++;


                    gridRow = string.Format(rowStr, "dropTiny", statCounter % 2 == 1 ? "info" : "info3") + string.Format(labelCol, titles[4]);

                    foreach (string q in quantaHeaders)
                    {

                        string value = "";
                        string value2 = "";

                        value = expenseBudgetDictionary[bs]["meanObservedExpense"][q];
                        value = value == "" ? "0" : value;
                        value2 = expenseBudgetDictionary[bs]["stDevObservedExpense"][q];
                        value2 = value2 == "" ? "0" : value2;

                        gridRow += string.Format(dataCol, string.Format("{0:C2}", value.AsDecimal()) + " / " + string.Format("{0:C2}", value2.AsDecimal()));
                    }
                    gridRows += gridRow + closeDivStr;
                    statCounter++;

                    headerRow += closeDivStr;
                    mainSectionContent += string.Format(mainSectionContainer, headerRow + gridRows);
                }


                string mainString = mainSectionTitle + mainSectionContent;

                //main body, 1 for each of income and expense
                mainSectionTitle = string.Format(rowStr, "dropMedium", "") + string.Format(colStr, "12", "", "") + string.Format(topLabelSpan, "Income") + closeDivStr + closeDivStr;
                //main body, 1 for each budget/subBudget combination
                mainSectionContainer = "";
                mainSectionContent = "";
                foreach (string bs in incomeBudgetDictionary.Keys)
                {
                    budgetCounter++;
                    string budget = bs.Substring(0, bs.IndexOf("|"));
                    string subbudget = bs.Substring(bs.IndexOf("|") + 1);
                    mainSectionContainer = string.Format(rowStr, "dropTiny", "foldable" + (budgetCounter % 2 == 1 ? " info2" : "")) + string.Format(colStr, "1", "", "") + string.Format(budgetSpan, budget, subbudget) + closeDivStr + string.Format(colStr, "10", "folds", "") + "{0}" + closeDivStr + closeDivStr;
                    string headerRow = string.Format(rowStr, "dropTiny", "") + string.Format(headerCol, "&nbsp;");
                    string gridRow = "";
                    string gridRows = "";
                    foreach (string q in quantaHeaders)
                    {
                        headerRow += string.Format(headerCol, q);
                    }
                    gridRow = string.Format(rowStr, "dropTiny ", statCounter % 2 == 1 ? "info" : "info3") + string.Format(labelCol, titles[0]);

                    foreach (string q in quantaHeaders)
                    {
                        string value = "";
                        string value2 = "";

                        value = incomeBudgetDictionary[bs]["nonzeroObsIncome"][q];
                        value = value == "" ? "0" : value;
                        value2 = incomeBudgetDictionary[bs]["obs"][q];
                        value2 = value2 == "" ? "0" : value2;

                        gridRow += string.Format(dataCol, string.Format("{0:0}", value.AsDecimal()) + " / " + string.Format("{0:0}", value2.AsDecimal()));
                    }
                    gridRows += gridRow + closeDivStr;
                    statCounter++;

                    gridRow = string.Format(rowStr, "dropTiny", statCounter % 2 == 1 ? "info" : "info3") + string.Format(labelCol, titles[1]);

                    foreach (string q in quantaHeaders)
                    {
                        string value = "";

                        value = incomeBudgetDictionary[bs]["totalIncome"][q];
                        value = value == "" ? "0" : value;

                        gridRow += string.Format(dataCol, string.Format("{0:C2}", value.AsDecimal()));
                    }
                    gridRows += gridRow + closeDivStr;
                    statCounter++;

                    gridRow = string.Format(rowStr, "dropTiny", statCounter % 2 == 1 ? "info" : "info3") + string.Format(labelCol, titles[2]);

                    foreach (string q in quantaHeaders)
                    {
                        string value = "";
                        string value2 = "";

                        value = incomeBudgetDictionary[bs]["minIncome"][q];
                        value = value == "" ? "0" : value;
                        value2 = incomeBudgetDictionary[bs]["maxIncome"][q];
                        value2 = value2 == "" ? "0" : value2;

                        gridRow += string.Format(dataCol, string.Format("{0:C2}", value.AsDecimal()) + " / " + string.Format("{0:C2}", value2.AsDecimal()));
                    }
                    gridRows += gridRow + closeDivStr;
                    statCounter++;


                    gridRow = string.Format(rowStr, "dropTiny", statCounter % 2 == 1 ? "info" : "info3") + string.Format(labelCol, titles[3]);

                    foreach (string q in quantaHeaders)
                    {
                        string value = "";

                        value = incomeBudgetDictionary[bs]["medianObservedIncome"][q];
                        value = value == "" ? "0" : value;

                        gridRow += string.Format(dataCol, string.Format("{0:C2}", value.AsDecimal()));
                    }
                    gridRows += gridRow + closeDivStr;
                    statCounter++;


                    gridRow = string.Format(rowStr, "dropTiny", statCounter % 2 == 1 ? "info" : "info3") + string.Format(labelCol, titles[4]);

                    foreach (string q in quantaHeaders)
                    {

                        string value = "";
                        string value2 = "";

                        value = incomeBudgetDictionary[bs]["meanObservedIncome"][q];
                        value = value == "" ? "0" : value;
                        value2 = incomeBudgetDictionary[bs]["stDevObservedIncome"][q];
                        value2 = value2 == "" ? "0" : value2;

                        gridRow += string.Format(dataCol, string.Format("{0:C2}", value.AsDecimal()) + " / " + string.Format("{0:C2}", value2.AsDecimal()));
                    }
                    gridRows += gridRow + closeDivStr;
                    statCounter++;

                    headerRow += closeDivStr;
                    mainSectionContent += string.Format(mainSectionContainer, headerRow + gridRows);
                }


                mainString += mainSectionTitle + mainSectionContent;
                return mainString;
            }

            IList<string> timeQuanta(FinancesEntities fc, DateTime startDate, DateTime endDate, string timeQuantumType)
            {

                IList<string> myQuanta = new List<string>();

                if (timeQuantumType == "month")
                {
                    var myQuantumQuery = (from dd in fc.DimDates
                                          where dd.FullDate >= startDate && dd.FullDate <= endDate
                                          select new { dd.ActDate });

                    myQuanta = myQuantumQuery.Select(a => a.ActDate.ToString()).Distinct().Take(5).ToList<string>();

                }


                if (timeQuantumType == "quarter")
                {
                    var myQuantumQuery = (from dd in fc.DimDates
                                          where dd.FullDate >= startDate && dd.FullDate <= endDate
                                          select new { dd.ActQtr });

                    myQuanta = myQuantumQuery.Select(a => a.ActQtr.ToString()).Distinct().Take(5).ToList<string>();
                }
                if (timeQuantumType == "year")
                {
                    var myQuantumQuery = (from dd in fc.DimDates
                                          where dd.FullDate >= startDate && dd.FullDate <= endDate
                                          select new { yearNumber=dd.CalendarYearNumber.ToString() });

                    myQuanta = myQuantumQuery.Select(a => a.yearNumber).Distinct().Take(5).ToList<string>();
                }

                return myQuanta;
            }

            void refreshActuals(FinancesEntities fc, DateTime startDate, DateTime endDate, string timeQuantumType)
            {

                IList<string> quanta = timeQuanta(fc, startDate, endDate, timeQuantumType);

                foreach (string s in quanta)
                {
                    fc.captureMaterializedSummaryStatistics(timeQuantumType, s, "");
                }
            }

        }
@{

    Layout = "~/Content/shared/_entry2Layout.cshtml";

    Dictionary<string, string> densities = new Dictionary<string, string>();
        densities.Add("month", "Monthly");
    densities.Add("quarter", "Quarterly");
    densities.Add("year", "Anually");

    Dictionary<string, string> depths = new Dictionary<string, string>();
        depths.Add("incomeExpense", "High Level");
    depths.Add("budget", "Budgets");
    depths.Add("subbudget", "Subbudgets");

    budgetReport br = new budgetReport();
        br.startDate = Request["startDate"] == null ? System.DateTime.Parse(System.DateTime.Now.Month + "/1/" + System.DateTime.Now.Year) : System.DateTime.Parse(Request["startDate"]);
    br.endDate = Request["endDate"] == null ? System.DateTime.Today : System.DateTime.Parse(Request["endDate"]);
        br.density = (Request["densitySelect"] == "" || Request["densitySelect"] == null) ? "month" : densities.Where(i => i.Key == Request["densitySelect"]).First().Key;
    br.depth = (Request["depthSelect"] == null || Request["depthSelect"] == "") ? "subbudget" : depths.Where(i => i.Key == Request["depthSelect"]).First().Key;

    var fe = new FinancesEntities();

    if (Request["whichButton"] == "matButton") { refreshActuals(fe, br.startDate, br.endDate, br.density); }



}
@section scripts{
    <script type="text/javascript">
        function init() {
            $('.foldTrigger').click(foldHandler);
            $('.foldable').find('.col-sm-10.folds').hide();
        }

        function foldHandler(evt) {
            evt.preventDefault();
            targ = $(this).parents('.foldable');
            foldToggler(targ);
        }

        function foldToggler(targ) {
            $(targ).find('.folds').slideToggle();
        }

        $(document).ready(init);
    </script>
}
<!DOCTYPE html>
<html>
<head>
    <title></title>
    <link type="text/css" rel="stylesheet" href="~/Content/transcat.css" />
    <link type="text/css" rel="stylesheet" href="~/Content/shared/budget.css" />
    <script type="text/javascript" src="~/Scripts/finToolsScripts/search.js"></script>
</head>
<body>
    <div class="row">
        <div class="col-sm-2">
            <div class="affix">
                <form id="parameterForm" name="parameterForm" method="post">
                    <div class="row">
                        <div id="parameters" class="col-xs-12 foldable">
                            <div class="row foldTrigger">
                                <div class="col-xs-12">
                                    @Html.Label("Report Parameters", new { id = "mainLabel", name = "mainLabel" })
                                </div>
                            </div>
                            <div class="row folds dropTiny">
                                <div class="col-xs-12">
                                    @Html.Label("Start Date", new { @class = "folds" })
                                </div>
                            </div>


                            <!--

                            -->



                            <div class="row folds">
                                <div class="col-xs-12">
                                    @Html.TextBox("startDate", br.startDate, new { @class = "folds form-control" })
                                </div>
                            </div>
                            <div class="row folds dropTiny">
                                <div class="col-xs-6">
                                    <input type="button" class="btn btn-info" id="decrementStartDateM" value="<<" onclick="modDateAddMonth('#startDate', -1,'Y-MM-DD');" />
                                    <input type="button" class="btn btn-info" id="decrementStartDateD" value="<" onclick="modDateAddDay('#startDate', -1,'Y-MM-DD');" />
                                </div>
                                <div class="col-xs-6">
                                    <input type="button" class="btn btn-info" id="incrementStartDateD" value=">" onclick="modDateAddDay('#startDate', 1,'Y-MM-DD');" />
                                    <input type="button" class="btn btn-info" id="incrementStartDateM" value=">>" onclick="modDateAddMonth('#startDate', 1,'Y-MM-DD');" />
                                </div>
                            </div>
                            <div class="row folds dropTiny">
                                <div class="col-xs-12">
                                    @Html.Label("End Date", new { @class = "folds" })
                                </div>
                            </div>
                            <div class="row folds">
                                <div class="col-xs-12">
                                    @Html.TextBox("endDate", br.endDate, new { @class = "folds form-control" })
                                </div>
                            </div>
                            <div class="row folds dropTiny">
                                <div class="col-xs-6">
                                    <input type="button" class="btn btn-info" id="decrementEndDateM" value="<<" onclick="modDateAddMonth('#endDate', -1,'Y-MM-DD');" />
                                    <input type="button" class="btn btn-info" id="decrementEndDateD" value="<" onclick="modDateAddDay('#endDate', -1,'Y-MM-DD');" />
                                </div>
                                <div class="col-xs-6">
                                    <input type="button" class="btn btn-info" id="incrementEndDateD" value=">" onclick="modDateAddDay('#endDate', 1,'Y-MM-DD');" />
                                    <input type="button" class="btn btn-info" id="incrementEndDateM" value=">>" onclick="modDateAddMonth('#endDate', 1,'Y-MM-DD');" />
                                </div>
                            </div>
                            <div class="row folds dropTiny">
                                <div class="col-xs-12">
                                    @Html.Label("Time Density:", new { @class = "folds" })
                                </div>
                            </div>
                            <div class="row folds">
                                <div class="col-xs-12">
                                    @Html.DropDownList("densitySelect", densities.Select(i => new SelectListItem { Text = i.Value.ToString(), Value = i.Key.ToString(), Selected = (i.Key.ToString() == br.density) }), new { @class = "form-control" })
                                </div>
                            </div>
                            <div class="row dropSmall folds">
                                <div class="col-xs-12">
                                    <input id="submitButton" name="submitButton" type="button" class="btn btn-primary btn-block" value="Refresh" onclick="$('#whichButton').val('submitButton'); $('#parameterForm').submit();" />
                                </div>
                            </div>
                            <div class="row dropSmall folds">
                                <div class="col-xs-12">
                                    <input id="matButton" name="matButton" type="button" class="btn btn-success btn-block" value="Calculate Actuals" onclick="$('#whichButton').val('matButton'); $('#parameterForm').submit();" />
                                </div>
                            </div>
                            <div class="row dropSmall folds">
                                <div class="col-xs-12">
                                    @Html.Hidden("whichButton")
                                </div>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
        </div>
        <div class="col-sm-10">

            <div class="row">
                <div class="col-sm-12">
                    @Html.Raw(statisticsContent(fe, br.startDate, br.endDate, br.density))
                </div>
            </div>
        </div>
    </div>
</body>
</html>
