@using System.Dynamic;
@functions{
    dynamic expandoDynamicLookupProperty(dynamic exo, string propertyName)
    {
        var dict = (IDictionary<string, object>)exo;
        object returner;
        var success = dict.TryGetValue(propertyName, out returner);
        return returner;
    }

    void refreshActuals(FinancesEntities fc, DateTime startDate, DateTime endDate)
    {
        fc.materializeSimpleBudgetActual(startDate, endDate, 1, 1);
    }

}

@section headerScripts{
    <script type="text/javascript" src="~/Scripts/fusionCharts/fusioncharts.js"></script>

}

@section scripts{
    <script type="text/javascript">
        function init() {
            $('.foldTrigger').click(foldHandler);
            //$('.foldable').find('.folds').hide();
        }

        function foldHandler(evt) {
            evt.preventDefault();
            targ = $(this).parent('.foldable');
            foldToggler(targ);
        }

        function foldToggler(targ) {
            $(targ).find('.folds').slideToggle();
        }


        $(document).ready(init);
    </script>
}
@{

    Layout = "~/Content/shared/_entry2Layout.cshtml";

    Dictionary<string, string> densities = new Dictionary<string, string>();
    densities.Add("month", "Monthly");
    densities.Add("quarter", "Quarterly");
    densities.Add("year", "Anually");

    Dictionary<string, string> metrics = new Dictionary<string, string>();
    metrics.Add("actual", "Actual Spending");
    metrics.Add("a2e", "Actual To Expected");
    metrics.Add("expected", "Expected Budget");
    metrics.Add("remaining", "Remains to Spend");

    Dictionary<string, string> depths = new Dictionary<string, string>();
    depths.Add("incomeExpense", "High Level");
    depths.Add("budget", "Budgets");
    depths.Add("subbudget", "Subbudgets");

    budgetReport br = new budgetReport();
    br.startDate = Request["startDate"] == null ? System.DateTime.Parse(System.DateTime.Now.Month + "/1/" + System.DateTime.Now.Year) : System.DateTime.Parse(Request["startDate"]);
    br.endDate = Request["endDate"] == null ? System.DateTime.Today : System.DateTime.Parse(Request["endDate"]);
    br.density = (Request["densitySelect"] == "" || Request["densitySelect"] == null) ? "month" : densities.Where(i => i.Key == Request["densitySelect"]).First().Key;
    br.metric = (Request["metricSelect"] == null || Request["metricSelect"] == "") ? "actual" : metrics.Where(i => i.Key == Request["metricSelect"]).First().Key;
    br.depth = (Request["depthSelect"] == null || Request["depthSelect"] == "") ? "subbudget" : depths.Where(i => i.Key == Request["depthSelect"]).First().Key;

    var fe = new FinancesEntities();

    if (Request["whichButton"] == "matButton") { refreshActuals(fe, br.startDate, br.endDate); }

    //var res = fe.simpleBudgets.Where(x => x.label3 !="").Select(
    //        s =>
    //          new { s.label1, s.label2, s.label3, transactionStartDate = s.simpleBudgetExpecteds.Select(se => se.transactionStartDate) }

    //          );


    var level3BudgetDetails = (from sb in fe.simpleBudgets
                               from sbe in sb.simpleBudgetExpecteds
                               join dd in fe.DimDates on System.Data.Entity.DbFunctions.TruncateTime(sbe.transactionStartDate) equals dd.FullDate
                               from sbca in sbe.simpleBudgetCalculatedActuals.DefaultIfEmpty()
                               where br.endDate >= sbe.transactionStartDate && br.startDate <= sbe.transactionEndDate
                               where System.DateTime.Now >= sbe.effectiveDate && System.DateTime.Now <= sbe.retiredDate
                               where sb.label3 != null && sb.label3 != ""
                               select new { sb.label1, sb.label2, sb.label3, expectedAmount = sbe.amount, actualAmount = (sbca.amount == null ? 0 : sbca.amount), sb.sortOrder, sbe.transactionStartDate, sbe.transactionEndDate, dd.ActDate, dd.ActQtr, dd.CalendarYearNumber });

    var level3BudgetSummary = level3BudgetDetails
        .Select(x => new
        {
            x.label1,
            x.label2,
            x.label3,
            x.transactionStartDate,
            x.transactionEndDate,
            x.expectedAmount,
            x.actualAmount,
            x.sortOrder,
            x.ActDate,
            x.ActQtr,
            x.CalendarYearNumber
        });


    var level2BudgetDetails = (from sb in fe.simpleBudgets
                               from sbe in sb.simpleBudgetExpecteds
                               join dd in fe.DimDates on System.Data.Entity.DbFunctions.TruncateTime(sbe.transactionStartDate) equals dd.FullDate
                               from sbca in sbe.simpleBudgetCalculatedActuals.DefaultIfEmpty()
                               where br.endDate >= sbe.transactionStartDate && br.startDate <= sbe.transactionEndDate
                               where System.DateTime.Now >= sbe.effectiveDate && System.DateTime.Now <= sbe.retiredDate
                               where sb.label2 != null && sb.label2 != ""
                               select new { sb.label1, sb.label2, expectedAmount = sbe.amount, actualAmount = (sbca.amount == null ? 0 : sbca.amount), sb.sortOrder, sbe.transactionStartDate, sbe.transactionEndDate, dd.ActDate, dd.ActQtr, dd.CalendarYearNumber });

    var level2BudgetSummary = level2BudgetDetails.GroupBy(x => new { x.label1, x.label2, x.transactionStartDate, x.transactionEndDate, x.ActDate, x.ActQtr, x.CalendarYearNumber })
        .Select(x => new
        {
            x.Key.label1,
            x.Key.label2,
            label3 = "",
            x.Key.transactionStartDate,
            x.Key.transactionEndDate,
            expectedAmount = x.Sum(k => k.expectedAmount),
            actualAmount = x.Sum(k => k.actualAmount),
            sortOrder = x.Max(k => k.sortOrder),
            x.Key.ActDate,
            x.Key.ActQtr,
            x.Key.CalendarYearNumber

        });



    var level1BudgetDetails = (from sb in fe.simpleBudgets
                               from sbe in sb.simpleBudgetExpecteds
                               join dd in fe.DimDates on System.Data.Entity.DbFunctions.TruncateTime(sbe.transactionStartDate) equals dd.FullDate
                               from sbca in sbe.simpleBudgetCalculatedActuals.DefaultIfEmpty()
                               where br.endDate >= sbe.transactionStartDate && br.startDate <= sbe.transactionEndDate
                               where System.DateTime.Now >= sbe.effectiveDate && System.DateTime.Now <= sbe.retiredDate
                               where sb.label1 != null && sb.label1 != ""
                               select new { sb.label1, expectedAmount = sbe.amount, actualAmount = (sbca.amount == null ? 0 : sbca.amount), sb.sortOrder, sbe.transactionStartDate, sbe.transactionEndDate, dd.ActDate, dd.ActQtr, dd.CalendarYearNumber });


    var level1BudgetSummary = level1BudgetDetails.GroupBy(x => new { x.label1, x.transactionStartDate, x.transactionEndDate, x.ActDate, x.ActQtr, x.CalendarYearNumber })
     .Select(x => new
     {
         x.Key.label1,
         label2 = "",
         label3 = "",
         x.Key.transactionStartDate,
         x.Key.transactionEndDate,
         expectedAmount = x.Sum(k => k.expectedAmount),
         actualAmount = x.Sum(k => k.actualAmount),
         sortOrder = x.Max(k => k.sortOrder),
         x.Key.ActDate,
         x.Key.ActQtr,
         x.Key.CalendarYearNumber

     });


    var unionSource = br.depth == "budget" ? level2BudgetSummary : br.depth == "subbudget" ? level2BudgetSummary.Union(level3BudgetSummary) : level1BudgetSummary;
    var allBudgetSummary = level1BudgetSummary.Union(unionSource).OrderBy(x => x.sortOrder).OrderBy(x => x.label3 == "" ? (x.label2 == "" ? 2 : 1) : (x.label2 == "" ? 1 : 0));

    IDictionary<string, IDictionary<string, string>> a2eData = new Dictionary<string, IDictionary<string, string>>();

    WebGrid wg = new WebGrid(canPage: false);

    List<WebGridColumn> wgCols = new List<WebGridColumn>();

    wgCols.Add(wg.Column("label1", "Income/Expense"));
    wgCols.Add(wg.Column("label2", "Budget"));
    wgCols.Add(wg.Column("label3", "SubBudget"));
    var classifiers = allBudgetSummary.Select(x => new { x.label1, x.label2, x.label3, x.sortOrder }).Distinct();
    var result = new List<dynamic>();

    if (br.density == "month")
    {
        var pivots = allBudgetSummary.Select(x => new { x.ActDate }).Distinct();
        foreach (var p in pivots)
        {
            wgCols.Add(
                wg.Column(
                    columnName: p.ActDate,
                    header: p.ActDate + " (" + br.metric + ")",
                    format: (item) =>
                        String.Format("{0:C2}", expandoDynamicLookupProperty(item.Value, p.ActDate))
                    )
            );
        }


        foreach (var c in classifiers)
        {
            var row = new ExpandoObject() as IDictionary<string, Object>;
            row.Add("label1", c.label1);
            row.Add("label2", c.label2);
            row.Add("label3", c.label3);
            row.Add("sortOrder", c.sortOrder);
            foreach (var p in pivots)
            {
                var value =
                    allBudgetSummary.Where(x => x.label1 == c.label1 && x.label2 == c.label2 && x.label3 == c.label3 && x.ActDate == p.ActDate).
                    GroupBy(x => new { x.label1, x.label2, x.label3, x.sortOrder, x.ActDate }).
                    Select(x => new { expectedAmount = x.Sum(k => k.expectedAmount), actualAmount = x.Sum(k => k.actualAmount), remainingAmount = x.Sum(k => k.actualAmount - k.expectedAmount) }).ToList()[0];
                var displayValue = (decimal)0;
                switch (br.metric)
                {
                    case "actual": displayValue = value.actualAmount; break;
                    case "a2e": displayValue = (decimal)value.expectedAmount - value.actualAmount; break;
                    case "expected": displayValue = (decimal)value.expectedAmount; break;
                    case "remaining": displayValue = (decimal)value.remainingAmount; break;
                    default: break;
                }
                if (br.metric == "a2e") { }
                row.Add(p.ActDate, displayValue);
            }
            result.Add(row);
        }
    }


    if (br.density == "quarter")
    {
        var pivots = allBudgetSummary.Select(x => new { x.ActQtr }).Distinct();
        foreach (var p in pivots)
        {
            wgCols.Add(
                wg.Column(
                    columnName: p.ActQtr,
                    header: p.ActQtr + " (" + br.metric + ")",
                    format: (item) =>
                        String.Format("{0:C2}", expandoDynamicLookupProperty(item.Value, p.ActQtr))
                    )
            );
        }

        foreach (var c in classifiers)
        {
            var row = new ExpandoObject() as IDictionary<string, Object>;
            row.Add("label1", c.label1);
            row.Add("label2", c.label2);
            row.Add("label3", c.label3);
            row.Add("sortOrder", c.sortOrder);
            foreach (var p in pivots)
            {
                var value =
                    allBudgetSummary.Where(x => x.label1 == c.label1 && x.label2 == c.label2 && x.label3 == c.label3 && x.ActQtr == p.ActQtr).
                    GroupBy(x => new { x.label1, x.label2, x.label3, x.sortOrder, x.ActQtr }).
                    Select(x => new { expectedAmount = x.Sum(k => k.expectedAmount), actualAmount = x.Sum(k => k.actualAmount), remainingAmount = x.Sum(k => k.actualAmount - k.expectedAmount) }).ToList()[0];
                var displayValue = (decimal)0;
                switch (br.metric)
                {
                    case "actual": displayValue = value.actualAmount; break;
                    case "a2e": displayValue = value.actualAmount; break;
                    case "expected": displayValue = (decimal)value.expectedAmount; break;
                    case "remaining": displayValue = (decimal)value.remainingAmount; break;
                    default: break;
                }

                row.Add(p.ActQtr, displayValue);
            }
            result.Add(row);
        }
    }


    if (br.density == "year")
    {
        var pivots = allBudgetSummary.Select(x => new { x.CalendarYearNumber }).Distinct();
        foreach (var p in pivots)
        {
            wgCols.Add(
                wg.Column(
                    columnName: p.CalendarYearNumber.ToString(),
                    header: p.CalendarYearNumber.ToString() + " (" + br.metric + ")",
                    format: (item) =>
                        String.Format("{0:C2}", expandoDynamicLookupProperty(item.Value, p.CalendarYearNumber.ToString()))
                    )
            );
        }

        foreach (var c in classifiers)
        {
            var row = new ExpandoObject() as IDictionary<string, Object>;
            row.Add("label1", c.label1);
            row.Add("label2", c.label2);
            row.Add("label3", c.label3);
            row.Add("sortOrder", c.sortOrder);
            foreach (var p in pivots)
            {
                var value =
                    allBudgetSummary.Where(x => x.label1 == c.label1 && x.label2 == c.label2 && x.label3 == c.label3 && x.CalendarYearNumber == p.CalendarYearNumber).
                    GroupBy(x => new { x.label1, x.label2, x.label3, x.sortOrder, x.CalendarYearNumber }).
                    Select(x => new { expectedAmount = x.Sum(k => k.expectedAmount), actualAmount = x.Sum(k => k.actualAmount), remainingAmount = x.Sum(k => k.actualAmount - k.expectedAmount) }).ToList()[0];
                var displayValue = (decimal)0;
                switch (br.metric)
                {
                    case "actual": displayValue = value.actualAmount; break;
                    case "a2e": displayValue = value.actualAmount; break;
                    case "expected": displayValue = (decimal)value.expectedAmount; break;
                    case "remaining": displayValue = (decimal)value.remainingAmount; break;
                    default: break;
                }

                row.Add(p.CalendarYearNumber.ToString(), displayValue);
            }
            result.Add(row);
        }
    }

    wg.Bind(result.OrderBy(x => x.sortOrder).ThenBy(x => x.label3 == "" ? (x.label2 == "" ? 2 : 1) : (x.label2 == "" ? 1 : 0)));



    if (br.depth == "budget") { wgCols.Remove(wgCols[2]); }
    if (br.depth == "incomeExpense") { wgCols.Remove(wgCols[2]); wgCols.Remove(wgCols[1]); }


    #region charts


    #region a2e

    fusionChartsWrapper fcw;
    FusionCharts.Charts.Chart a2eChart = new FusionCharts.Charts.Chart();
    IDictionary<string, Dictionary<string, string>> a2eActuals = new Dictionary<string, Dictionary<string, string>>();
    IDictionary<string, Dictionary<string, string>> a2eExpected;
    IDictionary<string, FusionCharts.Charts.Chart> a2eChartList = new Dictionary<string, FusionCharts.Charts.Chart>();


    if (br.metric == "a2e" && br.density == "month" && br.depth == "budget")
    {

        a2eActuals = allBudgetSummary.Where(s => s.label2 != "").GroupBy(abs => abs.ActDate)
                        .ToDictionary(
                            x => x.Key,
                            x => x.GroupBy(a => new { a.label1, a.label2 }, a => a.actualAmount, (budget, amount) => new { key = budget.label1 + " - " + budget.label2, incomeExpense = budget.label1, sumActual = amount.Sum().ToString() })
                                    .Where(s => s.incomeExpense == "Expenses")
                                    .ToDictionary(y => y.key, y => y.sumActual)
                        );

        a2eExpected = allBudgetSummary.Where(s => s.label2 != "").GroupBy(abs => abs.ActDate)
                        .ToDictionary(
                            x => x.Key,
                            x => x.GroupBy(a => new { a.label1, a.label2 }, a => a.expectedAmount, (budget, amount) => new { key = budget.label1 + " - " + budget.label2, incomeExpense = budget.label1, sumExpected = amount.Sum().ToString() }
                                )
                                .ToDictionary(y => y.key, y => y.sumExpected)
                        );


        foreach (string k in a2eActuals.Keys)
        {
            IDictionary<string, string> a2eRemaining = new Dictionary<string, string>();
            IDictionary<string, string> a2eOverage = new Dictionary<string, string>();
            IDictionary<string, string> a2eMerged = new Dictionary<string, string>();

            IDictionary<string, string> thisActual = new Dictionary<string, string>();
            IDictionary<string, string> thisExpected = new Dictionary<string, string>();

            thisActual = a2eActuals[k];
            thisExpected = a2eExpected[k];

            foreach (string kk in thisExpected.Keys)
            {
                if (thisActual.ContainsKey(kk))
                {
                    if (Decimal.Parse(thisActual[kk]) < 0 && Decimal.Parse(thisActual[kk]) < Decimal.Parse(thisExpected[kk]))
                    {
                        a2eOverage.Add(kk, Math.Abs((Decimal.Parse(thisActual[kk]) - Decimal.Parse(thisExpected[kk]))).ToString());
                        a2eMerged.Add(kk, Math.Abs(Decimal.Parse(thisExpected[kk])).ToString());
                        a2eRemaining.Add(kk, "0");
                    }
                    if (Decimal.Parse(thisActual[kk]) < 0 && Decimal.Parse(thisActual[kk]) >= Decimal.Parse(thisExpected[kk]))
                    {
                        a2eRemaining.Add(kk, Math.Abs((Decimal.Parse(thisExpected[kk]) - Decimal.Parse(thisActual[kk]))).ToString());
                        a2eMerged.Add(kk, Math.Abs(Decimal.Parse(thisActual[kk])).ToString());
                        a2eOverage.Add(kk, "0");
                    }
                    if (Decimal.Parse(thisActual[kk]) > 0 && Decimal.Parse(thisActual[kk]) >= Decimal.Parse(thisExpected[kk]))
                    {
                        a2eOverage.Add(kk, Math.Abs((Decimal.Parse(thisActual[kk]) - Decimal.Parse(thisExpected[kk]))).ToString());
                        a2eMerged.Add(kk, Math.Abs(Decimal.Parse(thisExpected[kk])).ToString());
                        a2eRemaining.Add(kk, "0");
                    }
                    if (Decimal.Parse(thisActual[kk]) > 0 && Decimal.Parse(thisActual[kk]) < Decimal.Parse(thisExpected[kk]))
                    {
                        a2eRemaining.Add(kk, Math.Abs((Decimal.Parse(thisExpected[kk]) - Decimal.Parse(thisActual[kk]))).ToString());
                        a2eMerged.Add(kk, Math.Abs(Decimal.Parse(thisActual[kk])).ToString());
                        a2eOverage.Add(kk, "0");
                    }
                    if (Decimal.Parse(thisActual[kk]) == 0)
                    {
                        a2eMerged.Add(kk, "0");
                        a2eRemaining.Add(kk, Math.Abs(Decimal.Parse(thisExpected[kk])).ToString());
                        a2eOverage.Add(kk, "0");
                    }
                }
                else
                {
                    a2eMerged.Add(kk, "0");
                    a2eRemaining.Add(kk, thisExpected[kk]);
                    a2eOverage.Add(kk, "0");
                }
            }

            fcw = new fusionChartsWrapper();
            fcw.setType(chartType: "stackedcolumn2d", chartId: "a2e_" + k, chartWidth: "1800", chartHeight: "600");
            fcw.setStyle(caption: "Actual to Expected Budget Performance", subCaption: k, xAxisName: "Budget Category", yAxisName: "", showPercentValues: "0", labelDisplay: "rotate",showValues:"0",decimals:"0");
            fcw.addData("Spending", a2eMerged,"#00009C");
            fcw.addData("Remaining Spending", a2eRemaining,"#116611");
            fcw.addData("Spending Overage", a2eOverage,"#A00A0A");
            a2eChart = fcw.makeChart();
            a2eChartList.Add(k, a2eChart);
        }
    }

    #endregion

    #region IncomeAndExpenseChart
    IDictionary<string, IDictionary<string, string>> dataSetsForExpenseChart = new Dictionary<string, IDictionary<string, string>>();
    IDictionary<string, IDictionary<string, string>> dataSetsForIncomeChart = new Dictionary<string, IDictionary<string, string>>();

    var ee = (IDictionary<string, object>)result.First();
    foreach (string k in ee.Keys)
    {
        if (k.Substring(0, 5) != "label" && k != "sortOrder")
        {
            dataSetsForExpenseChart.Add(k, new Dictionary<string, string>());
            dataSetsForIncomeChart.Add(k, new Dictionary<string, string>());
        }
    }

    foreach (var r in result)
    {
        if (!(r.label2 == "" && r.label3 == ""))
        {
            var rr = (IDictionary<string, object>)r;
            string innerKey = r.label2.ToString() + (r.label3.ToString() == "" ? "" : " - " + r.label3.ToString());
            foreach (string rrk in rr.Keys)
            {
                if (rrk.Substring(0, 5) != "label" && rrk != "sortOrder")
                {
                    if (r.label1 == "Expenses")
                    {
                        dataSetsForExpenseChart[rrk].Add(innerKey, Math.Abs((decimal)rr[rrk]).ToString());
                    }
                    if (r.label1 == "Income")
                    {
                        dataSetsForIncomeChart[rrk].Add(innerKey, Math.Abs((decimal)rr[rrk]).ToString());
                    }
                }
            }
        }
    }
    fcw = new fusionChartsWrapper();
    FusionCharts.Charts.Chart budgetExpenseChart = new FusionCharts.Charts.Chart();

    fcw.setType(chartType: dataSetsForExpenseChart.Keys.Count == 1 ? "column2d" : "msColumn2d", chartId: "budgetExpenseChart", chartWidth: "1800", chartHeight: "600");
    fcw.setStyle(decimals: "0", xAxisName: "", yAxisName: "", caption: "Expense History", subCaption: "", labelDisplay: "rotate", showValues: br.depth == "subbudget" ? "0" : "1");

    foreach (string k in dataSetsForExpenseChart.Keys)
    {
        fcw.addData(k, dataSetsForExpenseChart[k]);
    }

    budgetExpenseChart = fcw.makeChart();

    fcw = new fusionChartsWrapper();

    FusionCharts.Charts.Chart budgetIncomeChart = new FusionCharts.Charts.Chart();

    fcw.setType(chartType: dataSetsForIncomeChart.Keys.Count == 1 ? "column2d" : "msColumn2d", chartId: "budgetIncomeChart", chartWidth: "1800", chartHeight: "600");
    fcw.setStyle(decimals: "0", xAxisName: "", yAxisName: "", caption: "Income History", subCaption: "", labelDisplay: "rotate", showValues: br.depth == "subbudget" ? "0" : "1");

    foreach (string k in dataSetsForIncomeChart.Keys)
    {
        fcw.addData(k, dataSetsForIncomeChart[k]);
    }

    budgetIncomeChart = fcw.makeChart();
    #endregion

    #endregion


}
<!DOCTYPE html>
<html>
<head>
    <title></title>
    <link type="text/css" rel="stylesheet" href="~/Content/transcat.css" />
</head>
<body>
    <div class="row">
        <div class="col-sm-2">
            <div class="affix">
                <form id="parameterForm" name="parameterForm" method="post">
                    <div class="row">
                        <div id="parameters" class="col-xs-12 foldable">
                            <div class="row foldTrigger">
                                <div class="col-xs-12">
                                    @Html.Label("Report Parameters", new { @class = "foldTrigger", id = "mainLabel", name = "mainLabel" })
                                </div>
                            </div>
                            <div class="row folds dropTiny">
                                <div class="col-xs-12">
                                    @Html.Label("Start Date", new { @class = "folds" })
                                </div>
                            </div>
                            <div class="row folds">
                                <div class="col-xs-12">
                                    @Html.TextBox("startDate", br.startDate, new { @class = "folds form-control" })
                                </div>
                            </div>
                            <div class="row folds dropTiny">
                                <div class="col-xs-12">
                                    @Html.Label("End Date", new { @class = "folds" })
                                </div>
                            </div>
                            <div class="row folds">
                                <div class="col-xs-12">
                                    @Html.TextBox("endDate", br.endDate, new { @class = "folds form-control" })
                                </div>
                            </div>
                            <div class="row folds dropTiny">
                                <div class="col-xs-12">
                                    @Html.Label("Time Density:", new { @class = "folds" })
                                </div>
                            </div>
                            <div class="row folds">
                                <div class="col-xs-12">
                                    @Html.DropDownList("densitySelect", densities.Select(i => new SelectListItem { Text = i.Value.ToString(), Value = i.Key.ToString(), Selected = (i.Key.ToString() == br.density) }), new { @class = "form-control" })
                                </div>
                            </div>
                            <div class="row folds dropTiny">
                                <div class="col-xs-12">
                                    @Html.Label("Financial Metric:", new { @class = "folds" })
                                </div>
                            </div>
                            <div class="row folds">
                                <div class="col-xs-12">
                                    @Html.DropDownList("metricSelect", metrics.Select(i => new SelectListItem { Text = i.Value.ToString(), Value = i.Key.ToString(), Selected = (i.Key.ToString() == br.metric) }), new { @class = "form-control" })
                                </div>
                            </div>
                            <div class="row folds dropTiny">
                                <div class="col-xs-12">
                                    @Html.Label("Grouping Depth:", new { @class = "folds" })
                                </div>
                            </div>
                            <div class="row folds">
                                <div class="col-xs-12">
                                    @Html.DropDownList("depthSelect", depths.Select(i => new SelectListItem { Text = i.Value.ToString(), Value = i.Key.ToString(), Selected = (i.Key.ToString() == br.depth) }), new { @class = "form-control" })
                                </div>
                            </div>
                            <div class="row dropSmall folds">
                                <div class="col-xs-12">
                                    <input id="submitButton" name="submitButton" type="button" class="btn btn-primary btn-block" value="Refresh" onclick="$('#whichButton').val('submitButton'); $('#parameterForm').submit();" />
                                </div>
                            </div>
                            <div class="row dropSmall folds">
                                <div class="col-xs-12">
                                    <input id="matButton" name="matButton" type="button" class="btn btn-success btn-block" value="Calculate Actuals" onclick="$('#whichButton').val('matButton'); $('#parameterForm').submit();" />
                                </div>
                            </div>
                            <div class="row dropSmall folds">
                                <div class="col-xs-12">
                                    @Html.Hidden("whichButton")
                                </div>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
        </div>
        <div class="col-sm-10">
            @wg.GetHtml(columns: wgCols, tableStyle: "table table-condensed", alternatingRowStyle: "info", selectedRowStyle: "active")
        </div>
    </div>
    <div class="row">
        <div class="col-xs-10 col-xs-offset-2">
            @{
                string a2eChartOutput = "";
                if (br.metric == "a2e" && br.density == "month" && br.depth == "budget")
                {
                    foreach (KeyValuePair<string, FusionCharts.Charts.Chart> c in a2eChartList)
                    {
                        string start = "<div class=\"row\"><div class=\"col-xs-12\">";
                        string end = "</div></div>";
                        a2eChartOutput += start + c.Value.Render() + end;
                    }
                }
            }
            @Html.Raw(a2eChartOutput)
        </div>
    </div>
    <div class="row">
        <div class="col-xs-10 col-xs-offset-2">
            @Html.Raw(budgetExpenseChart.Render())
        </div>
    </div>
    <div class="row">
        <div class="col-xs-10 col-xs-offset-2">
            @Html.Raw(budgetIncomeChart.Render())
        </div>

    </div>
</body>
</html>
